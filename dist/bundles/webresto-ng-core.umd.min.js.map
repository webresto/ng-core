{"version":3,"sources":["../../src/lib/services/event-message.ts","../../src/lib/services/eventer.service.ts","../../src/lib/services/state.service.ts","../../src/lib/config.ts","../../src/lib/services/net.service.ts","../../src/lib/services/resto-storage.service.ts","../../src/lib/ng-core.module.ts","../../src/lib/http-interceptors/server-error.interceptor.ts"],"names":["type","title","body","this","EventerService","eventMessage","EventEmitter","eventAction","prototype","emitMessageEvent","message","emit","emitActionEvent","action","getMessageEmitter","getActionEmitter","factory","ɵfac","providedIn","maintenance$","BehaviorSubject","StateService","Config","endpointUrl","_this","port","prefix","versionModule","subscribe","url","i0","ɵɵinject","NetService","http","config","get","isApi","pipe","retry","put","data","post","i1$1","HttpClient","RestoStorageService","initTypeStorage","event","typeStorage","key","set","value","sub","observe","next","changeKey","NgCoreModule","providers","imports","LS_TOKEN_NAME","ServerErrorInterceptor","eventer","state","intercept","req","console","info","authToken","localStorage","getItem","handle","clone","headers","tap","HttpResponse","status","Error","catchError","handleError","bind","error","enable","description","startDate","stopDate","currentTime","Date","getTime","startTime","stopTime","social","throwError","ErrorEvent","EventMessage","removeItem"],"mappings":"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","sourcesContent":["export class EventMessage {\r\n  type:string;\r\n  title:string;\r\n  body:string;\r\n\r\n  constructor(type, title, body) {\r\n    this.type = type;\r\n    this.title = title;\r\n    this.body = body;\r\n  }\r\n}\r\n","import { Injectable,EventEmitter } from '@angular/core';\r\nimport { EventMessage } from './event-message';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventerService {\r\n  eventMessage: EventEmitter<EventMessage> = new EventEmitter();\r\n  eventAction: EventEmitter<EventMessage> = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  emitMessageEvent(message:EventMessage) {\r\n    this.eventMessage.emit(message);\r\n  }\r\n  emitActionEvent(action:EventMessage) {\r\n    this.eventAction.emit(action);\r\n  }\r\n\r\n\r\n  getMessageEmitter() {\r\n    return this.eventMessage;\r\n  }\r\n  getActionEmitter() {\r\n    return this.eventAction;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StateService {\r\n  maintenance$: BehaviorSubject<any>;\r\n\r\n  constructor() {\r\n    this.maintenance$ = new BehaviorSubject<any>(null);\r\n  }\r\n}\r\n","import { Inject,Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class Config {\r\n  url:any;\r\n  port:number = 80;\r\n  prefix:string = \"api/\";\r\n  versionModule = \"0.5\";\r\n\r\n  constructor(@Inject('ApiDomain') endpointUrl:BehaviorSubject<any>) {\r\n    endpointUrl.subscribe(url=>{\r\n      this.url = url;\r\n    })  \r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../config';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { retry } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NetService {\r\n  constructor(private http: HttpClient, public config: Config) {  }\r\n\r\n  public get<T=any>(url: string, isApi: boolean = true): Observable<T> {\r\n    url = isApi\r\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\r\n      : this.config.url + url;\r\n    return this.http.get<T>(url)\r\n      .pipe(\r\n        retry(3) // retry a failed request up to 3 times\r\n      );\r\n  }\r\n\r\n  public put<T=any>(url: string, data: T, isApi: boolean = true): Observable<any> {\r\n\r\n    url = isApi\r\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\r\n      : this.config.url + url;\r\n\r\n    return this.http.put(url, data);\r\n\r\n  }\r\n\r\n  public post<T=any,R=any>(url: string, data: T, isApi: boolean = true): Observable<any> {\r\n\r\n    url = isApi\r\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\r\n      : this.config.url + url;\r\n\r\n    return this.http.post(url, data);\r\n  }\r\n\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestoStorageService {\r\n  event:BehaviorSubject<any>;\r\n\r\n\r\n  constructor() {\r\n    this.initTypeStorage();\r\n    this.event = new BehaviorSubject({});\r\n  }\r\n\r\n  initTypeStorage() {\r\n    //  this.cookiesStorageService.set('ola', \"work\");\r\n    //  this.localStorageService.set(\"ola\",\"work\");\r\n    //   //  this.sharedStorageService.set(\"ola\",\"work\");\r\n    //   //  console.log(this.cookiesStorageService.get('ola'))\r\n    //   console.log(this.localStorageService.get('olaet'))\r\n    //  console.log(this.sharedStorageService.get('ola'))\r\n\r\n  }\r\n\r\n  get(typeStorage:string, key:string):string {\r\n    return this[typeStorage].get(key);\r\n\r\n  }\r\n\r\n  set(typeStorage:string, key:string, value:string):Observable<any> {\r\n    return this[typeStorage].set(key, value);\r\n  }\r\n\r\n\r\n  sub(typeStorage:string, key:string):Observable<any> {\r\n\r\n    this[typeStorage].observe()\r\n      .subscribe((event) => {\r\n        if (event.key == key) {\r\n          this.event.next({\"changeKey\": key})\r\n        }\r\n\r\n      });\r\n    return this.event;\r\n\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  providers:[],\r\n  exports: []\r\n})\r\nexport class NgCoreModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n  HttpResponse,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\n\r\nimport { EventerService } from '../services/eventer.service';\r\nimport { EventMessage } from '../services/event-message';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport { StateService } from \"../services/state.service\";\r\n\r\nconst LS_TOKEN_NAME = 'gf:tkn:v2';\r\n\r\n@Injectable()\r\nexport class ServerErrorInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private eventer: EventerService,\r\n    private state: StateService\r\n  ) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    console.info('Interceptor', req);\r\n\r\n    const authToken = localStorage.getItem(LS_TOKEN_NAME);\r\n\r\n    return next.handle(!authToken ? req : req.clone({\r\n      headers: req.headers.set('Authorization', `JWT ${authToken}`)\r\n    })).pipe(\r\n      tap(\r\n        event => {\r\n          if (event instanceof HttpResponse) {\r\n            if (event.body.status && event.body.message && event.body.message[0]) {\r\n              throw new Error(event.body.message[0]);\r\n            }\r\n          }\r\n        }\r\n      ),\r\n      catchError(this.handleError.bind(this))\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n\r\n    if (error.error.enable\r\n      && typeof error.error.title !== 'undefined'\r\n      && typeof error.error.description !== 'undefined'\r\n      && typeof error.error.startDate !== 'undefined'\r\n      && typeof error.error.stopDate !== 'undefined') {\r\n\r\n      const currentTime = new Date().getTime(),\r\n        startTime = new Date(error.error.startDate).getTime(),\r\n        stopTime = new Date(error.error.stopDate).getTime();\r\n\r\n      if (currentTime > startTime && currentTime < stopTime) {\r\n        this.state.maintenance$.next({\r\n          title: error.error.title,\r\n          description: error.error.description,\r\n          social: error.error.social\r\n        });\r\n      }\r\n\r\n      return throwError(error.error);\r\n    }\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else if (error instanceof Error) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.message);\r\n\r\n      switch (error.message) {\r\n        case 'timeout-or-duplicate':\r\n          return throwError('Ошибка сервера (таймаут). Повторите попытку позже');\r\n      }\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n\r\n      if (error.status == 401) {\r\n        this.eventer.emitMessageEvent(\r\n          new EventMessage('Unauthorized', '', '')\r\n        );\r\n        localStorage.removeItem(LS_TOKEN_NAME);\r\n        return throwError(\r\n          error.error && error.error.title\r\n            ? error.error.title\r\n            : 'Необходимо пройти авторизацию'\r\n        );\r\n      } else if (error?.status == 404 && error?.error == \"User not found\") {\r\n        localStorage.removeItem(LS_TOKEN_NAME);\r\n      } else if ((error.status == 400 || error.status == 500)\r\n        && error.error\r\n        && error.error.message\r\n        && error.error.message.title\r\n        && error.error.message.body) {\r\n        this.eventer.emitMessageEvent(\r\n          new EventMessage('error', error.error.message.title, error.error.message.body)\r\n        );\r\n      }\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError(error.error);\r\n  };\r\n}"]}