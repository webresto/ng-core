{"version":3,"sources":["../src/lib/services/event-message.ts","../src/lib/services/eventer.service.ts","../src/lib/services/state.service.ts","../../src/lib/config.ts","../src/lib/services/net.service.ts","../src/lib/services/resto-storage.service.ts","../../src/lib/ng-core.module.ts","../src/lib/http-interceptors/server-error.interceptor.ts"],"names":["type","title","body","this","EventerService","eventMessage","EventEmitter","eventAction","prototype","emitMessageEvent","message","emit","emitActionEvent","action","getMessageEmitter","getActionEmitter","factory","ɵfac","providedIn","maintenance$","BehaviorSubject","StateService","Config","endpointUrl","_this","port","prefix","versionModule","subscribe","url","i0","ɵɵinject","NetService","http","config","get","isApi","options","headers","params","pipe","retry","put","data","post","i1$1","HttpClient","RestoStorageService","initTypeStorage","event","typeStorage","key","set","value","sub","observe","next","changeKey","NgCoreModule","providers","imports","LS_TOKEN_NAME","ServerErrorInterceptor","eventer","state","intercept","req","console","info","authToken","localStorage","getItem","handle","clone","map","HttpResponse","_b","_a","_d","_c","_f","_e","EventMessage","catchError","err","handleError","error","enable","description","startDate","stopDate","currentTime","Date","getTime","startTime","stopTime","_g","social","throwError","ErrorEvent","_h","_j","_k","status","removeItem","_m","_l","_p","_o","_r","_q","_t","_s"],"mappings":"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","sourcesContent":["export class EventMessage {\r\n  type:string;\r\n  title:string;\r\n  body:string;\r\n\r\n  constructor(type, title, body) {\r\n    this.type = type;\r\n    this.title = title;\r\n    this.body = body;\r\n  }\r\n}\r\n","import { Injectable,EventEmitter } from '@angular/core';\r\nimport { EventMessage } from './event-message';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventerService {\r\n  eventMessage: EventEmitter<EventMessage> = new EventEmitter();\r\n  eventAction: EventEmitter<EventMessage> = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  emitMessageEvent(message:EventMessage) {\r\n    this.eventMessage.emit(message);\r\n  }\r\n  emitActionEvent(action:EventMessage) {\r\n    this.eventAction.emit(action);\r\n  }\r\n\r\n\r\n  getMessageEmitter() {\r\n    return this.eventMessage;\r\n  }\r\n  getActionEmitter() {\r\n    return this.eventAction;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StateService {\r\n  maintenance$: BehaviorSubject<any>;\r\n\r\n  constructor() {\r\n    this.maintenance$ = new BehaviorSubject<any>(null);\r\n  }\r\n}\r\n","import { Inject,Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class Config {\r\n  url:any;\r\n  port:number = 80;\r\n  prefix:string = \"api/\";\r\n  versionModule = \"0.5\";\r\n\r\n  constructor(@Inject('ApiDomain') endpointUrl:BehaviorSubject<any>) {\r\n    endpointUrl.subscribe(url=>{\r\n      this.url = url;\r\n    })  \r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../config';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { retry } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NetService {\r\n  constructor(private http: HttpClient, public config: Config) { }\r\n\r\n  public get<T = any>(url: string, isApi: boolean = true, options: {\r\n    headers?: { [header: string]: string },\r\n    params?: { [params: string]: string },\r\n  } = {}): Observable<T> {\r\n    url = isApi\r\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\r\n      : this.config.url + url;\r\n    return this.http.get<T>(url, { headers: options.headers, params: options.params })\r\n      .pipe(\r\n        retry(3) // retry a failed request up to 3 times\r\n      );\r\n  }\r\n\r\n  public put<T = any>(url: string, data: T, isApi: boolean = true): Observable<any> {\r\n\r\n    url = isApi\r\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\r\n      : this.config.url + url;\r\n\r\n    return this.http.put(url, data);\r\n\r\n  }\r\n\r\n  public post<T = any, R = any>(url: string, data: T, isApi: boolean = true, options: {\r\n    headers?: { [header: string]: string },\r\n    params?: { [params: string]: string }\r\n  } = {}): Observable<any> {\r\n\r\n    url = isApi\r\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\r\n      : this.config.url + url;\r\n\r\n    return this.http.post(url, data, { headers: options.headers, params: options.params });\r\n  }\r\n\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestoStorageService {\r\n  event:BehaviorSubject<any>;\r\n\r\n\r\n  constructor() {\r\n    this.initTypeStorage();\r\n    this.event = new BehaviorSubject({});\r\n  }\r\n\r\n  initTypeStorage() {\r\n    //  this.cookiesStorageService.set('ola', \"work\");\r\n    //  this.localStorageService.set(\"ola\",\"work\");\r\n    //   //  this.sharedStorageService.set(\"ola\",\"work\");\r\n    //   //  console.log(this.cookiesStorageService.get('ola'))\r\n    //   console.log(this.localStorageService.get('olaet'))\r\n    //  console.log(this.sharedStorageService.get('ola'))\r\n\r\n  }\r\n\r\n  get(typeStorage:string, key:string):string {\r\n    return this[typeStorage].get(key);\r\n\r\n  }\r\n\r\n  set(typeStorage:string, key:string, value:string):Observable<any> {\r\n    return this[typeStorage].set(key, value);\r\n  }\r\n\r\n\r\n  sub(typeStorage:string, key:string):Observable<any> {\r\n\r\n    this[typeStorage].observe()\r\n      .subscribe((event) => {\r\n        if (event.key == key) {\r\n          this.event.next({\"changeKey\": key})\r\n        }\r\n\r\n      });\r\n    return this.event;\r\n\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  providers:[],\r\n  exports: []\r\n})\r\nexport class NgCoreModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n  HttpResponse,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\n\r\nimport { EventerService } from '../services/eventer.service';\r\nimport { EventMessage } from '../services/event-message';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { StateService } from \"../services/state.service\";\r\nimport { element } from 'protractor';\r\n\r\nconst LS_TOKEN_NAME = 'gf:tkn:v2';\r\n\r\n@Injectable()\r\nexport class ServerErrorInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private eventer: EventerService,\r\n    private state: StateService\r\n  ) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    console.info('Interceptor', req);\r\n    const authToken = localStorage.getItem(LS_TOKEN_NAME);\r\n    return next.handle(!authToken ? req : req.clone({\r\n      headers: req.headers.set('Authorization', `JWT ${authToken}`)\r\n    })).pipe(\r\n      map(\r\n        event => {\r\n          if (event instanceof HttpResponse && event?.body?.message?.body && event?.body?.message?.title && event?.body?.message?.type) {\r\n            this.eventer.emitMessageEvent(\r\n              new EventMessage(event.body.message.type, event.body.message.title, event.body.message.body)\r\n            );\r\n          };\r\n          return event;\r\n        }\r\n      ),\r\n      catchError(err => this.handleError(err))\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error?.error?.enable && error?.error?.title && error?.error?.description && error?.error?.startDate && error?.error?.stopDate) {\r\n      const currentTime = new Date().getTime(),\r\n        startTime = new Date(error?.error?.startDate).getTime(),\r\n        stopTime = new Date(error?.error?.stopDate).getTime();\r\n      if (currentTime > startTime && currentTime < stopTime) {\r\n          this.state.maintenance$.next({\r\n            title: error.error.title,\r\n            description: error.error.description,\r\n            social: error.error.social\r\n          });\r\n      };\r\n      return throwError(error.error);\r\n    } else {\r\n      switch (true) {\r\n        case error?.error instanceof ErrorEvent: console.error('An error occurred:', error?.error?.message); return throwError(error?.error);;\r\n\r\n        case (error.error?.message == 'timeout-or-duplicate'):\r\n          console.error('An error occurred:', error?.message);\r\n          return throwError('Ошибка сервера (таймаут). Повторите попытку позже');\r\n\r\n        case (error.error?.message != 'timeout-or-duplicate'):\r\n          console.error(`Backend returned code ${error?.status}, ` + `body was: `, error?.error);\r\n          if (error?.status == 401 || (error?.status == 404 && error?.error == \"User not found\")) {\r\n            this.eventer.emitMessageEvent(\r\n              new EventMessage('Unauthorized', '', '')\r\n            );\r\n            localStorage.removeItem(LS_TOKEN_NAME);\r\n          };\r\n          if (error?.status == 400 && error?.error?.message?.title && error?.error?.message?.body) {\r\n            this.eventer.emitMessageEvent(\r\n              new EventMessage('error', error?.error?.message?.title, error?.error?.message?.body)\r\n            );\r\n          }\r\n          return throwError(error?.error);\r\n      };\r\n    };\r\n    // return an observable with a user-facing error message\r\n  };\r\n\r\n}"]}