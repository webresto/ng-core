{"version":3,"sources":["ng://@webresto/ng-core/lib/services/event-message.ts","ng://@webresto/ng-core/lib/services/eventer.service.ts","ng://@webresto/ng-core/lib/services/state.service.ts","ng://@webresto/ng-core/lib/config.ts","ng://@webresto/ng-core/lib/services/net.service.ts","ng://@webresto/ng-core/lib/services/resto-storage.service.ts","ng://@webresto/ng-core/lib/ng-core.module.ts","ng://@webresto/ng-core/lib/http-interceptors/server-error.interceptor.ts","ng://@webresto/ng-core/lib/http-interceptors/message.interceptor.ts","ng://@webresto/ng-core/lib/http-interceptors/index.ts"],"names":["EventMessage","type","title","body","this","EventerService","eventMessage","EventEmitter","eventAction","prototype","emitMessageEvent","message","emit","emitActionEvent","action","getMessageEmitter","getActionEmitter","Injectable","args","providedIn","StateService","maintenance$","BehaviorSubject","Config","endpointUrl","_this","port","prefix","versionModule","subscribe","url","decorators","Inject","NetService","http","config","get","isApi","pipe","retry","put","data","post","HttpClient","RestoStorageService","cookiesStorageService","localStorageService","sharedStorageService","initTypeStorage","event","typeStorage","key","set","value","sub","observe","next","changeKey","CookiesStorageService","LocalStorageService","SharedStorageService","NgCoreModule","NgModule","imports","declarations","exports","ServerErrorInterceptor","eventer","state","intercept","req","handle","tap","HttpResponse","status","Error","catchError","handleError","bind","error","enable","description","startDate","stopDate","currentTime","Date","getTime","startTime","stopTime","social","throwError","ErrorEvent","console","MessageInterceptor","ngCoreHttpInterceptorProviders","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"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","sourcesContent":["export class EventMessage {\n  type:string;\n  title:string;\n  body:string;\n\n  constructor(type, title, body) {\n    this.type = type;\n    this.title = title;\n    this.body = body;\n  }\n}\n","import { Injectable,EventEmitter } from '@angular/core';\nimport { EventMessage } from './event-message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventerService {\n  eventMessage: EventEmitter<any> = new EventEmitter();\n  eventAction: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n\n  emitMessageEvent(message:EventMessage) {\n    this.eventMessage.emit(message);\n  }\n  emitActionEvent(action:EventMessage) {\n    this.eventAction.emit(action);\n  }\n\n\n  getMessageEmitter() {\n    return this.eventMessage;\n  }\n  getActionEmitter() {\n    return this.eventAction;\n  }\n}\n","import { Injectable,EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n  maintenance$: BehaviorSubject<any>;\n\n  constructor() {\n    this.maintenance$ = new BehaviorSubject<any>(null);\n  }\n}\n","import { Inject,Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class Config {\n  url:any;\n  port:number = 80;\n  prefix:string = \"api/\";\n  versionModule = \"0.5\";\n\n  constructor(@Inject('ApiDomain') endpointUrl:BehaviorSubject<any>) {\n    endpointUrl.subscribe(url=>{\n      this.url = url;\n    })  \n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config} from '../config';\nimport { HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetService {\n  config:any;\n\n  constructor(private http:HttpClient, config:Config) {\n    this.config = config;\n  }\n\n  public  get(url:string, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.get<any>(url)\n      .pipe(\n        retry(3) // retry a failed request up to 3 times\n      );\n  }\n\n  public  put(url:string, data:any, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.put(url, data);\n\n  }\n\n  public  post(url:string, data:any, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.post(url, data);\n  }\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CookiesStorageService, LocalStorageService,\n  SharedStorageService, NgxStorageEvent\n} from 'ngx-store';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestoStorageService {\n  event:BehaviorSubject<any>;\n\n\n  constructor(private cookiesStorageService:CookiesStorageService,\n              private localStorageService:LocalStorageService,\n              private sharedStorageService:SharedStorageService) {\n    this.initTypeStorage();\n    this.event = new BehaviorSubject({});\n  }\n\n  initTypeStorage() {\n    //  this.cookiesStorageService.set('ola', \"work\");\n    //  this.localStorageService.set(\"ola\",\"work\");\n    //   //  this.sharedStorageService.set(\"ola\",\"work\");\n    //   //  console.log(this.cookiesStorageService.get('ola'))\n    //   console.log(this.localStorageService.get('olaet'))\n    //  console.log(this.sharedStorageService.get('ola'))\n\n  }\n\n  get(typeStorage:string, key:string):string {\n    return this[typeStorage].get(key);\n\n  }\n\n  set(typeStorage:string, key:string, value:string):Observable<any> {\n    return this[typeStorage].set(key, value);\n  }\n\n\n  sub(typeStorage:string, key:string):Observable<any> {\n\n    this[typeStorage].observe()\n      .subscribe((event) => {\n        if (event.key == key) {\n          this.event.next({\"changeKey\": key})\n        }\n\n      });\n    return this.event;\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { WebStorageModule } from 'ngx-store';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class NgCoreModule { }\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\n\nimport { EventerService } from '../services/eventer.service';\nimport { EventMessage } from '../services/event-message';\n\nimport { Observable, throwError } from 'rxjs';\nimport { finalize, tap, catchError } from 'rxjs/operators';\nimport { StateService } from \"../services/state.service\";\n\n@Injectable()\nexport class ServerErrorInterceptor implements HttpInterceptor {\n\n  constructor(\n    private eventer:EventerService,\n    private state:StateService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler):Observable<HttpEvent<any>> {\n\n    return next.handle(req)\n      .pipe(\n        tap(\n          event => {\n            if(event instanceof HttpResponse) {\n              if(event.body.status && event.body.message && event.body.message[0]) {\n                throw new Error(event.body.message[0]);\n              }\n            }\n          }\n        ),\n        catchError(this.handleError.bind(this))\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n\n    if(error.error.enable\n      && typeof error.error.title !== 'undefined'\n      && typeof error.error.description !== 'undefined'\n      && typeof error.error.startDate !== 'undefined'\n      && typeof error.error.stopDate !== 'undefined') {\n\n      const currentTime = new Date().getTime(),\n        startTime = new Date(error.error.startDate).getTime(),\n        stopTime = new Date(error.error.stopDate).getTime();\n\n      if(currentTime > startTime && currentTime < stopTime) {\n        this.state.maintenance$.next({\n          title: error.error.title,\n          description: error.error.description,\n          social: error.error.social\n        });\n      }\n\n      return throwError(error.error);\n    }\n\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else if (error instanceof Error) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.message);\n\n      switch(error.message) {\n        case 'timeout-or-duplicate':\n          return throwError('ÐÑÐ¸Ð±ÐºÐ° ÑÐµÑÐ²ÐµÑÐ° (ÑÐ°Ð¹Ð¼Ð°ÑÑ). ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ Ð¿Ð¾Ð·Ð¶Ðµ');\n      }\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n\n      if(error.status == 401) {\n        this.eventer.emitMessageEvent(\n          new EventMessage('Unauthorized', '', '')\n        );\n\n        return throwError(\n          error.error && error.error.title\n            ? error.error.title\n            : 'ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð¿ÑÐ¾Ð¹ÑÐ¸ Ð°Ð²ÑÐ¾ÑÐ¸Ð·Ð°ÑÐ¸Ñ'\n        );\n      }else if((error.status == 400 || error.status == 500)\n        && error.error\n        && error.error.message\n        && error.error.message.title\n        && error.error.message.body) {\n        this.eventer.emitMessageEvent(\n          new EventMessage('error', error.error.message.title, error.error.message.body)\n        );\n      }\n    }\n    // return an observable with a user-facing error message\n    return throwError(error.error);\n  };\n}","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\n\nimport { EventerService } from '../services/eventer.service';\nimport { EventMessage } from '../services/event-message';\n\nimport { Observable, throwError } from 'rxjs';\nimport { finalize, tap, catchError } from 'rxjs/operators';\nimport { StateService } from \"../services/state.service\";\n\n@Injectable()\nexport class MessageInterceptor implements HttpInterceptor {\n\n  constructor(\n    private eventer:EventerService,\n    private state:StateService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler):Observable<HttpEvent<any>> {\n\n    return next.handle(req)\n      .pipe(\n        tap(\n          event => {\n            if(event instanceof HttpResponse) {\n              if(event.body.enable\n                && typeof event.body.title !== 'undefined'\n                && typeof event.body.description !== 'undefined'\n                && typeof event.body.startDate !== 'undefined'\n                && typeof event.body.stopDate !== 'undefined') {\n\n                const currentTime = new Date().getTime(),\n                      startTime = new Date(event.body.startDate).getTime(),\n                      stopTime = new Date(event.body.stopDate).getTime();\n\n                if(currentTime > startTime && currentTime < stopTime) {\n                  this.state.maintenance$.next({\n                    title: event.body.title,\n                    description: event.body.description\n                  });\n                }\n              }\n\n\n              if(event.body.message\n                && event.body.message.body\n                && event.body.message.title\n                && event.body.message.type) {\n\n                switch (event.body.message.type) {\n                  case 'info':\n                    this.eventer.emitMessageEvent(\n                      new EventMessage('info', event.body.message.title, event.body.message.body)\n                    );\n                    break;\n                  case 'success':\n                    this.eventer.emitMessageEvent(\n                      new EventMessage('success', event.body.message.title, event.body.message.body)\n                    );\n                    break;\n                  case 'error':\n                    this.eventer.emitMessageEvent(\n                      new EventMessage('error', event.body.message.title, event.body.message.body)\n                    );\n                    break;\n                  case 'warning':\n                    this.eventer.emitMessageEvent(\n                      new EventMessage('warning', event.body.message.title, event.body.message.body)\n                    );\n                    break;\n                }\n\n\n              }\n\n            }\n          }\n        )\n      );\n  }\n}","import { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ServerErrorInterceptor } from './server-error.interceptor';\nimport { MessageInterceptor } from \"./message.interceptor\";\n\n\nexport const ngCoreHttpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: ServerErrorInterceptor, multi: true },\n  { provide: HTTP_INTERCEPTORS, useClass: MessageInterceptor, multi: true }\n];\n\n"]}