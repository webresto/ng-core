{"version":3,"sources":["ng://@webresto/ng-core/lib/services/event-message.ts","ng://@webresto/ng-core/lib/services/eventer.service.ts","ng://@webresto/ng-core/lib/services/state.service.ts","ng://@webresto/ng-core/lib/config.ts","ng://@webresto/ng-core/lib/services/net.service.ts","ng://@webresto/ng-core/lib/services/resto-storage.service.ts","ng://@webresto/ng-core/lib/ng-core.module.ts","ng://@webresto/ng-core/lib/http-interceptors/server-error.interceptor.ts","ng://@webresto/ng-core/lib/http-interceptors/message.interceptor.ts","ng://@webresto/ng-core/lib/http-interceptors/index.ts"],"names":["EventMessage","type","title","body","this","EventerService","EventEmitter","prototype","emitMessageEvent","message","eventMessage","emit","getMessageEmitter","Injectable","args","providedIn","StateService","maintenance$","BehaviorSubject","Config","endpointUrl","_this","subscribe","url","decorators","Inject","NetService","http","config","get","isApi","prefix","versionModule","pipe","retry","put","data","post","HttpClient","RestoStorageService","cookiesStorageService","localStorageService","sharedStorageService","initTypeStorage","event","typeStorage","key","set","value","sub","observe","next","changeKey","CookiesStorageService","LocalStorageService","SharedStorageService","NgCoreModule","NgModule","imports","declarations","exports","ServerErrorInterceptor","eventer","intercept","req","handle","tap","HttpResponse","status","Error","catchError","handleError","bind","error","ErrorEvent","console","throwError","MessageInterceptor","state","enable","description","startDate","stopDate","currentTime","Date","getTime","startTime","stopTime","ngCoreHttpInterceptorProviders","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"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","sourcesContent":["export class EventMessage {\n  type:string;\n  title:string;\n  body:string;\n\n  constructor(type, title, body) {\n    this.type = type;\n    this.title = title;\n    this.body = body;\n  }\n}\n","import { Injectable,EventEmitter } from '@angular/core';\nimport { EventMessage } from './event-message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventerService {\n  eventMessage: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n  emitMessageEvent(message:EventMessage) {\n    this.eventMessage.emit(message);\n  }\n  getMessageEmitter() {\n    return this.eventMessage;\n  }\n}\n","import { Injectable,EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n  maintenance$: BehaviorSubject<any>;\n\n  constructor() {\n    this.maintenance$ = new BehaviorSubject<any>(null);\n  }\n}\n","import { Inject,Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class Config {\n  url:any;\n  port:number = 80;\n  prefix:string = \"api/\";\n  versionModule = \"0.5\";\n\n  constructor(@Inject('ApiDomain') endpointUrl:BehaviorSubject<any>) {\n    endpointUrl.subscribe(url=>{\n      this.url = url;\n    })  \n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Config} from '../config';\nimport { HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetService {\n  config:any;\n\n  constructor(private http:HttpClient, config:Config) {\n    this.config = config;\n  }\n\n  public  get(url:string, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.get<any>(url)\n      .pipe(\n        retry(3) // retry a failed request up to 3 times\n      );\n  }\n\n  public  put(url:string, data:any, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.put(url, data);\n\n  }\n\n  public  post(url:string, data:any, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.post(url, data);\n  }\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CookiesStorageService, LocalStorageService,\n  SharedStorageService, NgxStorageEvent\n} from 'ngx-store';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestoStorageService {\n  event:BehaviorSubject<any>;\n\n\n  constructor(private cookiesStorageService:CookiesStorageService,\n              private localStorageService:LocalStorageService,\n              private sharedStorageService:SharedStorageService) {\n    this.initTypeStorage();\n    this.event = new BehaviorSubject({});\n  }\n\n  initTypeStorage() {\n    //  this.cookiesStorageService.set('ola', \"work\");\n    //  this.localStorageService.set(\"ola\",\"work\");\n    //   //  this.sharedStorageService.set(\"ola\",\"work\");\n    //   //  console.log(this.cookiesStorageService.get('ola'))\n    //   console.log(this.localStorageService.get('olaet'))\n    //  console.log(this.sharedStorageService.get('ola'))\n\n  }\n\n  get(typeStorage:string, key:string):string {\n    return this[typeStorage].get(key);\n\n  }\n\n  set(typeStorage:string, key:string, value:string):Observable<any> {\n    return this[typeStorage].set(key, value);\n  }\n\n\n  sub(typeStorage:string, key:string):Observable<any> {\n\n    this[typeStorage].observe()\n      .subscribe((event) => {\n        if (event.key == key) {\n          this.event.next({\"changeKey\": key})\n        }\n\n      });\n    return this.event;\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { WebStorageModule } from 'ngx-store';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class NgCoreModule { }\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\n\nimport { EventerService } from '../services/eventer.service';\nimport { EventMessage } from '../services/event-message';\n\nimport { Observable, throwError } from 'rxjs';\nimport { finalize, tap, catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ServerErrorInterceptor implements HttpInterceptor {\n\n  constructor(\n    private eventer:EventerService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler):Observable<HttpEvent<any>> {\n\n    return next.handle(req)\n      .pipe(\n        tap(\n          event => {\n            if(event instanceof HttpResponse) {\n\n              if(event.body.status && event.body.message && event.body.message[0]) {\n                throw new Error(event.body.message[0]);\n              }\n\n            }\n          }\n        ),\n        catchError(this.handleError.bind(this))\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else if (error instanceof Error) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.message);\n\n      switch(error.message) {\n        case 'timeout-or-duplicate':\n          return throwError('ÐÑÐ¸Ð±ÐºÐ° ÑÐµÑÐ²ÐµÑÐ° (ÑÐ°Ð¹Ð¼Ð°ÑÑ). ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ Ð¿Ð¾Ð·Ð¶Ðµ');\n      }\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n\n      if(error.status == 401) {\n        this.eventer.emitMessageEvent(\n          new EventMessage('Unauthorized', '', '')\n        );\n\n        return throwError('ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð¿ÑÐ¾Ð¹ÑÐ¸ Ð°Ð²ÑÐ¾ÑÐ¸Ð·Ð°ÑÐ¸Ñ');\n      }else if((error.status == 400 || error.status == 500)\n        && error.error\n        && error.error.message\n        && error.error.message.title\n        && error.error.message.body) {\n        this.eventer.emitMessageEvent(\n          new EventMessage('error', error.error.message.title, error.error.message.body)\n        );\n      }\n    }\n    // return an observable with a user-facing error message\n    return throwError(error.error);\n  };\n}","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\n\nimport { EventerService } from '../services/eventer.service';\nimport { EventMessage } from '../services/event-message';\n\nimport { Observable, throwError } from 'rxjs';\nimport { finalize, tap, catchError } from 'rxjs/operators';\nimport { StateService } from \"../services/state.service\";\n\n@Injectable()\nexport class MessageInterceptor implements HttpInterceptor {\n\n  constructor(\n    private eventer:EventerService,\n    private state:StateService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler):Observable<HttpEvent<any>> {\n\n    return next.handle(req)\n      .pipe(\n        tap(\n          event => {\n            if(event instanceof HttpResponse) {\n              if(event.body.enable\n                && typeof event.body.title !== 'undefined'\n                && typeof event.body.description !== 'undefined'\n                && typeof event.body.startDate !== 'undefined'\n                && typeof event.body.stopDate !== 'undefined') {\n\n                const currentTime = new Date().getTime(),\n                      startTime = new Date(event.body.startDate).getTime(),\n                      stopTime = new Date(event.body.stopDate).getTime();\n\n                if(currentTime > startTime && currentTime < stopTime) {\n                  this.state.maintenance$.next({\n                    title: event.body.title,\n                    description: event.body.description\n                  });\n                }\n\n              }\n\n\n              if(event.body.message\n                && event.body.message.body\n                && event.body.message.title\n                && event.body.message.type) {\n\n                switch (event.body.message.type) {\n                  case 'info':\n                    this.eventer.emitMessageEvent(\n                      new EventMessage('info', event.body.message.title, event.body.message.body)\n                    );\n                    break;\n                  case 'success':\n                    this.eventer.emitMessageEvent(\n                      new EventMessage('success', event.body.message.title, event.body.message.body)\n                    );\n                    break;\n                  case 'error':\n                    this.eventer.emitMessageEvent(\n                      new EventMessage('error', event.body.message.title, event.body.message.body)\n                    );\n                    break;\n                  case 'warning':\n                    this.eventer.emitMessageEvent(\n                      new EventMessage('warning', event.body.message.title, event.body.message.body)\n                    );\n                    break;\n                }\n\n\n              }\n\n            }\n          }\n        )\n      );\n  }\n}","import { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ServerErrorInterceptor } from './server-error.interceptor';\nimport { MessageInterceptor } from \"./message.interceptor\";\n\n\nexport const ngCoreHttpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: ServerErrorInterceptor, multi: true },\n  { provide: HTTP_INTERCEPTORS, useClass: MessageInterceptor, multi: true }\n];\n\n"]}