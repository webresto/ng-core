{"version":3,"sources":["ng://@sails-resto/ng-core/lib/services/event-message.ts","ng://@sails-resto/ng-core/lib/services/eventer.service.ts","ng://@sails-resto/ng-core/lib/config.ts","ng://@sails-resto/ng-core/lib/services/net.service.ts","ng://@sails-resto/ng-core/lib/services/resto-storage.service.ts","ng://@sails-resto/ng-core/lib/ng-core.module.ts","ng://@sails-resto/ng-core/lib/http-interceptors/server-error.interceptor.ts","ng://@sails-resto/ng-core/lib/http-interceptors/index.ts"],"names":["EventMessage","type","title","body","this","EventerService","EventEmitter","prototype","emitMessageEvent","message","eventMessage","emit","getMessageEmitter","Injectable","args","providedIn","Config","endpointUrl","_this","subscribe","url","BehaviorSubject","decorators","Inject","NetService","http","config","get","isApi","prefix","versionModule","pipe","retry","put","data","post","HttpClient","RestoStorageService","cookiesStorageService","localStorageService","sharedStorageService","initTypeStorage","event","typeStorage","key","set","value","sub","observe","next","changeKey","CookiesStorageService","LocalStorageService","SharedStorageService","NgCoreModule","NgModule","imports","declarations","exports","ServerErrorInterceptor","eventer","intercept","req","handle","tap","HttpResponse","status","Error","catchError","handleError","bind","error","ErrorEvent","console","throwError","ngCoreHttpInterceptorProviders","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"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","sourcesContent":["export class EventMessage {\n  type:string;\n  title:string;\n  body:string;\n\n  constructor(type, title, body) {\n    this.type = type;\n    this.title = title;\n    this.body = body;\n  }\n}\n","import { Injectable,EventEmitter } from '@angular/core';\nimport { EventMessage } from './event-message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventerService {\n  eventMessage: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n  emitMessageEvent(message:EventMessage) {\n    this.eventMessage.emit(message);\n  }\n  getMessageEmitter() {\n    return this.eventMessage;\n  }\n}\n","import { Inject,Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class Config {\n  url:any;\n  port:number = 80;\n  prefix:string = \"api/\";\n  versionModule = \"0.5\";\n\n  constructor(@Inject('ApiDomain') endpointUrl:BehaviorSubject<any>) {\n    endpointUrl.subscribe(url=>{\n      this.url = url;\n    })  \n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Config} from '../config';\nimport { HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetService {\n  config:any;\n\n  constructor(private http:HttpClient, config:Config) {\n    this.config = config;\n  }\n\n  public  get(url:string, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.get<any>(url)\n      .pipe(\n        retry(3) // retry a failed request up to 3 times\n      );\n  }\n\n  public  put(url:string, data:any, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.put(url, data);\n\n  }\n\n  public  post(url:string, data:any, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.post(url, data);\n  }\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CookiesStorageService, LocalStorageService,\n  SharedStorageService, NgxStorageEvent\n} from 'ngx-store';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestoStorageService {\n  event:BehaviorSubject<any>;\n\n\n  constructor(private cookiesStorageService:CookiesStorageService,\n              private localStorageService:LocalStorageService,\n              private sharedStorageService:SharedStorageService) {\n    this.initTypeStorage();\n    this.event = new BehaviorSubject({});\n  }\n\n  initTypeStorage() {\n    //  this.cookiesStorageService.set('ola', \"work\");\n    //  this.localStorageService.set(\"ola\",\"work\");\n    //   //  this.sharedStorageService.set(\"ola\",\"work\");\n    //   //  console.log(this.cookiesStorageService.get('ola'))\n    //   console.log(this.localStorageService.get('olaet'))\n    //  console.log(this.sharedStorageService.get('ola'))\n\n  }\n\n  get(typeStorage:string, key:string):string {\n    return this[typeStorage].get(key);\n\n  }\n\n  set(typeStorage:string, key:string, value:string):Observable<any> {\n    return this[typeStorage].set(key, value);\n  }\n\n\n  sub(typeStorage:string, key:string):Observable<any> {\n\n    this[typeStorage].observe()\n      .subscribe((event) => {\n        if (event.key == key) {\n          this.event.next({\"changeKey\": key})\n        }\n\n      });\n    return this.event;\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { WebStorageModule } from 'ngx-store';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class NgCoreModule { }\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\n\nimport { EventerService } from '../services/eventer.service';\nimport { EventMessage } from '../services/event-message';\n\nimport { Observable, throwError } from 'rxjs';\nimport { finalize, tap, catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ServerErrorInterceptor implements HttpInterceptor {\n\n  constructor(\n    private eventer:EventerService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler):Observable<HttpEvent<any>> {\n\n    return next.handle(req)\n      .pipe(\n        tap(\n          event => {\n            if(event instanceof HttpResponse) {\n\n              if(event.body.status && event.body.message) {\n                throw new Error(event.body.message[0]);\n              }\n\n            }\n          }\n        ),\n        catchError(this.handleError.bind(this))\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else if (error instanceof Error) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.message);\n\n      switch(error.message) {\n        case 'timeout-or-duplicate':\n          return throwError('ÐÑÐ¸Ð±ÐºÐ° ÑÐµÑÐ²ÐµÑÐ° (ÑÐ°Ð¹Ð¼Ð°ÑÑ). ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ Ð¿Ð¾Ð·Ð¶Ðµ');\n      }\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n\n      if(error.status == 401) {\n        this.eventer.emitMessageEvent(\n          new EventMessage('Unauthorized', '', '')\n        );\n\n        return throwError('ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð¿ÑÐ¾Ð¹ÑÐ¸ Ð°Ð²ÑÐ¾ÑÐ¸Ð·Ð°ÑÐ¸Ñ');\n      }\n    }\n    // return an observable with a user-facing error message\n    return throwError(error.error);\n  };\n}","import { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ServerErrorInterceptor } from './server-error.interceptor';\n\nexport const ngCoreHttpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: ServerErrorInterceptor, multi: true },\n];\n\n"]}