import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { EventMessage } from '../services/event-message';
import { throwError } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/eventer.service";
import * as i2 from "../services/state.service";
const LS_TOKEN_NAME = 'gf:tkn:v2';
export class ServerErrorInterceptor {
    constructor(eventer, state) {
        this.eventer = eventer;
        this.state = state;
    }
    intercept(req, next) {
        console.info('Interceptor', req);
        const authToken = localStorage.getItem(LS_TOKEN_NAME);
        return next.handle(!authToken ? req : req.clone({
            headers: req.headers.set('Authorization', `JWT ${authToken}`)
        })).pipe(tap(event => {
            var _a, _b, _c;
            if (event instanceof HttpResponse && ((_a = event === null || event === void 0 ? void 0 : event.body) === null || _a === void 0 ? void 0 : _a.status) && ((_b = event === null || event === void 0 ? void 0 : event.body) === null || _b === void 0 ? void 0 : _b.message[0])) {
                throw new Error((_c = event === null || event === void 0 ? void 0 : event.body) === null || _c === void 0 ? void 0 : _c.message[0]);
            }
        }), catchError(this.handleError.bind(this)));
    }
    handleError(error) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        if (((_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.enable) && typeof ((_b = error === null || error === void 0 ? void 0 : error.error) === null || _b === void 0 ? void 0 : _b.title) !== 'undefined'
            && typeof ((_c = error === null || error === void 0 ? void 0 : error.error) === null || _c === void 0 ? void 0 : _c.description) !== 'undefined'
            && typeof ((_d = error === null || error === void 0 ? void 0 : error.error) === null || _d === void 0 ? void 0 : _d.startDate) !== 'undefined'
            && typeof ((_e = error === null || error === void 0 ? void 0 : error.error) === null || _e === void 0 ? void 0 : _e.stopDate) !== 'undefined') {
            const currentTime = new Date().getTime(), startTime = new Date((_f = error === null || error === void 0 ? void 0 : error.error) === null || _f === void 0 ? void 0 : _f.startDate).getTime(), stopTime = new Date((_g = error === null || error === void 0 ? void 0 : error.error) === null || _g === void 0 ? void 0 : _g.stopDate).getTime();
            if (currentTime > startTime && currentTime < stopTime) {
                this.state.maintenance$.next({
                    title: error.error.title,
                    description: error.error.description,
                    social: error.error.social
                });
            }
            ;
            return throwError(error.error);
        }
        ;
        switch (true) {
            case (error === null || error === void 0 ? void 0 : error.error) instanceof ErrorEvent:
                console.error('An error occurred:', (_h = error === null || error === void 0 ? void 0 : error.error) === null || _h === void 0 ? void 0 : _h.message);
                return throwError(error === null || error === void 0 ? void 0 : error.error);
                ;
            case (error instanceof Error && (error === null || error === void 0 ? void 0 : error.message) == 'timeout-or-duplicate'):
                console.error('An error occurred:', error === null || error === void 0 ? void 0 : error.message);
                return throwError('Ошибка сервера (таймаут). Повторите попытку позже');
            case (error instanceof Error && (error === null || error === void 0 ? void 0 : error.message) != 'timeout-or-duplicate'):
                console.error(`Backend returned code ${error === null || error === void 0 ? void 0 : error.status}, ` + `body was: ${error === null || error === void 0 ? void 0 : error.error}`);
                if ((error === null || error === void 0 ? void 0 : error.status) == 401) {
                    this.eventer.emitMessageEvent(new EventMessage('Unauthorized', '', ''));
                    localStorage.removeItem(LS_TOKEN_NAME);
                    return throwError(((_j = error === null || error === void 0 ? void 0 : error.error) === null || _j === void 0 ? void 0 : _j.title) ? (_k = error === null || error === void 0 ? void 0 : error.error) === null || _k === void 0 ? void 0 : _k.title : 'Необходимо пройти авторизацию');
                }
                else if ((error === null || error === void 0 ? void 0 : error.status) == 404 && (error === null || error === void 0 ? void 0 : error.error) == "User not found") {
                    localStorage.removeItem(LS_TOKEN_NAME);
                }
                else if (((error === null || error === void 0 ? void 0 : error.status) == 400 || (error === null || error === void 0 ? void 0 : error.status) == 500)
                    && ((_m = (_l = error === null || error === void 0 ? void 0 : error.error) === null || _l === void 0 ? void 0 : _l.message) === null || _m === void 0 ? void 0 : _m.title)
                    && ((_p = (_o = error === null || error === void 0 ? void 0 : error.error) === null || _o === void 0 ? void 0 : _o.message) === null || _p === void 0 ? void 0 : _p.body)) {
                    this.eventer.emitMessageEvent(new EventMessage('error', (_r = (_q = error === null || error === void 0 ? void 0 : error.error) === null || _q === void 0 ? void 0 : _q.message) === null || _r === void 0 ? void 0 : _r.title, (_t = (_s = error === null || error === void 0 ? void 0 : error.error) === null || _s === void 0 ? void 0 : _s.message) === null || _t === void 0 ? void 0 : _t.body));
                }
                return throwError(error === null || error === void 0 ? void 0 : error.error);
        }
        ;
        // return an observable with a user-facing error message
    }
    ;
}
ServerErrorInterceptor.ɵfac = function ServerErrorInterceptor_Factory(t) { return new (t || ServerErrorInterceptor)(i0.ɵɵinject(i1.EventerService), i0.ɵɵinject(i2.StateService)); };
ServerErrorInterceptor.ɵprov = i0.ɵɵdefineInjectable({ token: ServerErrorInterceptor, factory: ServerErrorInterceptor.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ServerErrorInterceptor, [{
        type: Injectable
    }], function () { return [{ type: i1.EventerService }, { type: i2.StateService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,