{"version":3,"sources":["ng://@sails-resto/ng-core/lib/services/event-message.ts","ng://@sails-resto/ng-core/lib/services/eventer.service.ts","ng://@sails-resto/ng-core/lib/config.ts","ng://@sails-resto/ng-core/lib/services/net.service.ts","ng://@sails-resto/ng-core/lib/services/resto-storage.service.ts","ng://@sails-resto/ng-core/lib/ng-core.module.ts","ng://@sails-resto/ng-core/lib/http-interceptors/server-error.interceptor.ts","ng://@sails-resto/ng-core/lib/http-interceptors/index.ts"],"names":["EventMessage","type","title","body","this","EventerService","EventEmitter","prototype","emitMessageEvent","message","eventMessage","emit","getMessageEmitter","Injectable","args","providedIn","Config","endpointUrl","url","Inject","NetService","http","config","get","isApi","prefix","versionModule","pipe","retry","put","data","post","HttpClient","RestoStorageService","cookiesStorageService","localStorageService","sharedStorageService","initTypeStorage","event","BehaviorSubject","typeStorage","key","set","value","sub","_this","observe","subscribe","next","changeKey","CookiesStorageService","LocalStorageService","SharedStorageService","NgCoreModule","NgModule","imports","declarations","exports","ServerErrorInterceptor","eventer","intercept","req","handle","tap","HttpResponse","status","Error","catchError","handleError","bind","error","ErrorEvent","console","throwError","ngCoreHttpInterceptorProviders","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"ghBAAA,IAAAA,EAKE,SAAAA,EAAYC,EAAMC,EAAOC,GACvBC,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,GCRhBE,EAAA,WASE,SAAAA,sBAFkC,IAAIC,EAAAA,oBAGtCD,EAAAE,UAAAC,iBAAA,SAAiBC,GACfL,KAAKM,aAAaC,KAAKF,IAEzBJ,EAAAE,UAAAK,kBAAA,WACE,OAAOR,KAAKM,kCAXfG,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAJd,GCAAC,EAAA,WAWE,SAAAA,EAAiCC,aAJnB,eACE,0BACA,MAGdb,KAAKc,IAAMD,6BAXdJ,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,6EASCI,EAAAA,OAAML,KAAA,CAAC,8IAXtB,GCAAM,EAAA,WAYE,SAAAA,EAAoBC,EAAiBC,GAAjBlB,KAAAiB,KAAAA,EAClBjB,KAAKkB,OAASA,SAGRF,EAAAb,UAAAgB,aAAIL,EAAYM,GAMtB,YANsB,IAAAA,IAAAA,GAAA,GAEtBN,EAAMM,EACFpB,KAAKkB,OAAOJ,IAAMd,KAAKkB,OAAOG,OAASrB,KAAKkB,OAAOI,cAAgBR,EACnEd,KAAKkB,OAAOJ,IAAMA,EAEfd,KAAKiB,KAAKE,IAASL,GACvBS,KACCC,EAAAA,MAAM,KAIJR,EAAAb,UAAAsB,aAAIX,EAAYY,EAAUN,GAMhC,YANgC,IAAAA,IAAAA,GAAA,GAEhCN,EAAMM,EACFpB,KAAKkB,OAAOJ,IAAMd,KAAKkB,OAAOG,OAASrB,KAAKkB,OAAOI,cAAgBR,EACnEd,KAAKkB,OAAOJ,IAAMA,EAEfd,KAAKiB,KAAKQ,IAAIX,EAAKY,IAIpBV,EAAAb,UAAAwB,cAAKb,EAAYY,EAAUN,GAMjC,YANiC,IAAAA,IAAAA,GAAA,GAEjCN,EAAMM,EACFpB,KAAKkB,OAAOJ,IAAMd,KAAKkB,OAAOG,OAASrB,KAAKkB,OAAOI,cAAgBR,EACnEd,KAAKkB,OAAOJ,IAAMA,EAEfd,KAAKiB,KAAKU,KAAKb,EAAKY,wBAtC9BjB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLiB,EAAAA,kBADAhB,8IADT,GCAAiB,EAAA,WAeE,SAAAA,EAAoBC,EACAC,EACAC,GAFAhC,KAAA8B,sBAAAA,EACA9B,KAAA+B,oBAAAA,EACA/B,KAAAgC,qBAAAA,EAClBhC,KAAKiC,kBACLjC,KAAKkC,MAAQ,IAAIC,EAAAA,gBAAgB,WAGnCN,EAAA1B,UAAA8B,gBAAA,aAUAJ,EAAA1B,UAAAgB,IAAA,SAAIiB,EAAoBC,GACtB,OAAOrC,KAAKoC,GAAajB,IAAIkB,IAI/BR,EAAA1B,UAAAmC,IAAA,SAAIF,EAAoBC,EAAYE,GAClC,OAAOvC,KAAKoC,GAAaE,IAAID,EAAKE,IAIpCV,EAAA1B,UAAAqC,IAAA,SAAIJ,EAAoBC,GAAxB,IAAAI,EAAAzC,KASE,OAPAA,KAAKoC,GAAaM,UACfC,UAAU,SAACT,GACNA,EAAMG,KAAOA,GACfI,EAAKP,MAAMU,KAAK,CAACC,UAAaR,MAI7BrC,KAAKkC,2BA3CfzB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPZmC,EAAAA,6BAAuBC,EAAAA,2BACvBC,EAAAA,iOAHF,GCAAC,EAAA,oDAGCC,EAAAA,SAAQxC,KAAA,CAAC,CACRyC,QAAS,GACTC,aAAc,GACdC,QAAS,SANX,GCAAC,EAAA,WAmBE,SAAAA,EACUC,GAAAvD,KAAAuD,QAAAA,SAGVD,EAAAnD,UAAAqD,UAAA,SAAUC,EAAuBb,GAE/B,OAAOA,EAAKc,OAAOD,GAChBlC,KACCoC,EAAAA,IACE,SAAAzB,GACE,GAAGA,aAAiB0B,EAAAA,cAEf1B,EAAMnC,KAAK8D,QAAU3B,EAAMnC,KAAKM,QACjC,MAAM,IAAIyD,MAAM5B,EAAMnC,KAAKM,QAAQ,MAM3C0D,EAAAA,WAAW/D,KAAKgE,YAAYC,KAAKjE,SAI/BsD,EAAAnD,UAAA6D,qBAAYE,GAElB,GAAIA,EAAMA,iBAAiBC,WAEzBC,QAAQF,MAAM,qBAAsBA,EAAMA,MAAM7D,cAC3C,GAAI6D,aAAiBJ,MAI1B,OAFAM,QAAQF,MAAM,qBAAsBA,EAAM7D,SAEnC6D,EAAM7D,SACX,IAAK,uBACH,OAAOgE,EAAAA,WAAW,0DAStB,GAJAD,QAAQF,MACN,yBAAyBA,EAAML,OAAM,eACxBK,EAAMA,OAEF,KAAhBA,EAAML,OAKP,OAJA7D,KAAKuD,QAAQnD,iBACX,IAAIR,EAAa,eAAgB,GAAI,KAGhCyE,EAAAA,WAAW,iCAItB,OAAOA,EAAAA,WAAW,sEAvDrB5D,EAAAA,sDANQR,OAVT,GCIaqE,EAAiC,CAC5C,CAAEC,QAASC,EAAAA,kBAAmBC,SAAUnB,EAAwBoB,OAAO","sourcesContent":["export class EventMessage {\n  type:string;\n  title:string;\n  body:string;\n\n  constructor(type, title, body) {\n    this.type = type;\n    this.title = title;\n    this.body = body;\n  }\n}\n","import { Injectable,EventEmitter } from '@angular/core';\nimport { EventMessage } from './event-message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventerService {\n  eventMessage: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n  emitMessageEvent(message:EventMessage) {\n    this.eventMessage.emit(message);\n  }\n  getMessageEmitter() {\n    return this.eventMessage;\n  }\n}\n","import { Inject,Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class Config {\n  url:any;\n  port:number = 80;\n  prefix:string = \"api/\";\n  versionModule = \"0.5\";\n\n  constructor(@Inject('ApiDomain') endpointUrl:string) {\n    this.url = endpointUrl;\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Config} from '../config';\nimport { HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetService {\n  config:any;\n\n  constructor(private http:HttpClient, config:Config) {\n    this.config = config;\n  }\n\n  public  get(url:string, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.get<any>(url)\n      .pipe(\n        retry(3) // retry a failed request up to 3 times\n      );\n  }\n\n  public  put(url:string, data:any, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.put(url, data);\n\n  }\n\n  public  post(url:string, data:any, isApi:boolean = true):Observable<any> {\n\n    url = isApi\n      ? this.config.url + this.config.prefix + this.config.versionModule + url\n      : this.config.url + url;\n\n    return this.http.post(url, data);\n  }\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CookiesStorageService, LocalStorageService,\n  SharedStorageService, NgxStorageEvent\n} from 'ngx-store';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestoStorageService {\n  event:BehaviorSubject<any>;\n\n\n  constructor(private cookiesStorageService:CookiesStorageService,\n              private localStorageService:LocalStorageService,\n              private sharedStorageService:SharedStorageService) {\n    this.initTypeStorage();\n    this.event = new BehaviorSubject({});\n  }\n\n  initTypeStorage() {\n    //  this.cookiesStorageService.set('ola', \"work\");\n    //  this.localStorageService.set(\"ola\",\"work\");\n    //   //  this.sharedStorageService.set(\"ola\",\"work\");\n    //   //  console.log(this.cookiesStorageService.get('ola'))\n    //   console.log(this.localStorageService.get('olaet'))\n    //  console.log(this.sharedStorageService.get('ola'))\n\n  }\n\n  get(typeStorage:string, key:string):string {\n    return this[typeStorage].get(key);\n\n  }\n\n  set(typeStorage:string, key:string, value:string):Observable<any> {\n    return this[typeStorage].set(key, value);\n  }\n\n\n  sub(typeStorage:string, key:string):Observable<any> {\n\n    this[typeStorage].observe()\n      .subscribe((event) => {\n        if (event.key == key) {\n          this.event.next({\"changeKey\": key})\n        }\n\n      });\n    return this.event;\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { WebStorageModule } from 'ngx-store';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class NgCoreModule { }\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\n\nimport { EventerService } from '../services/eventer.service';\nimport { EventMessage } from '../services/event-message';\n\nimport { Observable, throwError } from 'rxjs';\nimport { finalize, tap, catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ServerErrorInterceptor implements HttpInterceptor {\n\n  constructor(\n    private eventer:EventerService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler):Observable<HttpEvent<any>> {\n\n    return next.handle(req)\n      .pipe(\n        tap(\n          event => {\n            if(event instanceof HttpResponse) {\n\n              if(event.body.status && event.body.message) {\n                throw new Error(event.body.message[0]);\n              }\n\n            }\n          }\n        ),\n        catchError(this.handleError.bind(this))\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else if (error instanceof Error) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.message);\n\n      switch(error.message) {\n        case 'timeout-or-duplicate':\n          return throwError('ÐÑÐ¸Ð±ÐºÐ° ÑÐµÑÐ²ÐµÑÐ° (ÑÐ°Ð¹Ð¼Ð°ÑÑ). ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ Ð¿Ð¾Ð·Ð¶Ðµ');\n      }\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n\n      if(error.status == 401) {\n        this.eventer.emitMessageEvent(\n          new EventMessage('Unauthorized', '', '')\n        );\n\n        return throwError('ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð¿ÑÐ¾Ð¹ÑÐ¸ Ð°Ð²ÑÐ¾ÑÐ¸Ð·Ð°ÑÐ¸Ñ');\n      }\n    }\n    // return an observable with a user-facing error message\n    return throwError('Ð§ÑÐ¾-ÑÐ¾ Ð¿Ð¾ÑÐ»Ð¾ Ð½Ðµ ÑÐ°Ðº. ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ Ð¿Ð¾Ð·Ð¶Ðµ.');\n  };\n}","import { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ServerErrorInterceptor } from './server-error.interceptor';\n\nexport const ngCoreHttpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: ServerErrorInterceptor, multi: true },\n];\n\n"]}